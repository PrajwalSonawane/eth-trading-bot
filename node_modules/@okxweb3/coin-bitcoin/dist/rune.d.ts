/// <reference types="node" />
import { Edict } from "./type";
export { encode as toVarInt, encodeToVec, decode as fromVarInt };
export { encodeV2 as toVarIntV2, encodeToVecV2 };
declare function encode(n: bigint): Uint8Array;
declare function encodeToVec(n: bigint, payload: number[]): void;
declare function encodeV2(n: bigint): Uint8Array;
declare function encodeToVecV2(n: bigint, payload: number[]): number[];
declare function decode(buffer: Uint8Array): [bigint, number];
export declare function buildRuneData(isMainnet: boolean, edicts: Edict[]): Buffer;
export declare function buildRuneMainMintData(isMainnet: boolean, edicts: Edict[], useDefaultOutput: boolean, defaultOutput: number, mint: boolean, mintNum: number): Buffer;
export declare function buildRuneMainMintOp(id: string, useDefaultOutput: boolean, defaultOutput: number, mint: boolean): {
    address: string;
    amount: number;
    omniScript: string;
};
